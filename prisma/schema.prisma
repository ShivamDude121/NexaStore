generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" 
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

model Client {
  id        String  @id @default(cuid())
  firstName String
  lastName  String
  email     String  @unique
  password  String
  role      Role    @default(USER)
  
  // Relations
  admin     Admin?
  user      User?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Admin {
  id          String   @id @default(cuid())
  balance     Decimal  @default(0.00) @db.Decimal(10, 2)

  // Relations
  clientId    String   @unique
  client      Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  products    Product[]
  orders      Order[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model User {
  id            String         @id @default(cuid())

  // Relations
  clientId      String         @unique
  client        Client         @relation(fields: [clientId], references: [id], onDelete: Cascade)
  orderHistory  OrderHistory[]
  cart          Cart?
  addresses     Address[]
  orders        Order[]

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Product {
  id          String   @id @default(cuid())
  name        String
  description String?
  cost        Decimal  @db.Decimal(10, 2)
  warranty    Int?
  images      String[] // Array of image URLs
  stock       Int      @default(0)

  // Relations
  adminId     String?
  admin       Admin?   @relation(fields: [adminId], references: [id], onDelete: Cascade)
  orders      Order[]
  cartItems   CartItem[]
  orderHistories OrderHistory[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Order {
  id            String        @id @default(cuid())
  productId     String
  userId        String
  adminId       String
  addressId     String
  status        OrderStatus   @default(PENDING)
  paymentStatus PaymentStatus @default(PENDING)
  quantity      Int           @default(1)
  priceAtOrder  Decimal       @db.Decimal(10, 2)
  totalAmount   Decimal       @db.Decimal(10, 2)
  orderedAt     DateTime      @default(now())

  // Relations
  product       Product       @relation(fields: [productId], references: [id], onDelete: Cascade)
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  admin         Admin         @relation(fields: [adminId], references: [id], onDelete: Cascade)
  address       Address       @relation(fields: [addressId], references: [id], onDelete: Cascade)
  payment       Payment?

  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model OrderHistory {
  id         String   @id @default(cuid())
  productId  String
  userId     String
  quantity   Int      @default(1)
  priceAtOrder Decimal @db.Decimal(10, 2)
  orderedAt  DateTime @default(now())

  // Relations
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Cart {
  id         String     @id @default(cuid())
  userId     String     @unique

  // Relations
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items      CartItem[]
  
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model CartItem {
  id        String   @id @default(cuid())
  quantity  Int      @default(1)
  price     Decimal  @db.Decimal(10, 2)

  // Relations
  cartId    String
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  @@unique([cartId, productId])
}

model Address {
  id          String   @id @default(cuid())
  userId      String
  street      String
  city        String
  state       String
  country     String
  postalCode  String
  isDefault   Boolean  @default(false)

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders      Order[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Payment {
  id            String        @id @default(cuid())
  orderId       String        @unique
  amount        Decimal       @db.Decimal(10, 2)
  status        PaymentStatus @default(PENDING)
  paymentMethod String
  transactionId String?

  // Relations
  order         Order         @relation(fields: [orderId], references: [id], onDelete: Cascade)

  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}
